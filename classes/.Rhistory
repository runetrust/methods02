#Function
myfunc <- function(number){
new_number = number+2
return(new_number)
}
myfunc(2)
#Defining f1 function
f1 <- function(x) {
(1 / sigma * sqrt(2 * pi)) * exp(-0.5 * ((x - mu) / sigma) ^ 2)
}
# Parameters
mu = 0
sigma = 1.0
tau = 1.0
#Defining f1 function
f1 <- function(x) {
(1 / sigma * sqrt(2 * pi)) * exp(-0.5 * ((x - mu) / sigma) ^ 2)
}
f2 <- function(x) {
(sqrt(tau / 2 * pi)) * exp(-tau * (x - mu) ^ 2) / 2)
f2 <- function(x) {
(sqrt(tau / 2 * pi)) * exp(-tau * (x - mu) ^ 2) / 2))
(sqrt(tau / 2 * pi)) * (exp(-tau * (x - mu) ^ 2) / 2)
f2 <- function(x) {
(sqrt(tau / 2 * pi)) * (exp(-tau * (x - mu) ^ 2) / 2)
}
f2 <- function(x) {
(sqrt(tau / 2 * pi)) * (exp(-tau * (x - mu) ^ 2) / 2)
}
?seq()
#Generate some x-values for the functions
x_values <- seq(-5,
5,
by = 0.1)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x_values)
# Parameters
mu = 0
sigma = 1.0
tau = 1.0
#Defining f1 function
f1 <- function(x) {
(1 / sigma * sqrt(2 * pi)) * exp(-0.5 * ((x - mu) / sigma) ^ 2)
}
f2 <- function(x) {
(sqrt(tau / 2 * pi)) * (exp(-tau * (x - mu) ^ 2) / 2)
}
#Generate some x-values for the functions
x_values <- seq(-5,
5,
by = 0.1)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x_values)
y_f2 <- f2(x_values)
#Creating a dataframe for plots
df <- data.frame(x = x_values,
f1 = y_f1,
f2 = y_f2)
View(df)
(sqrt(tau / (2 * pi))) * (exp(-tau * (x - mu) ^ 2) / 2)
f2 <- function(x) {
(sqrt(tau / (2 * pi))) * (exp(-tau * (x - mu) ^ 2) / 2)
}
#Generate some x-values for the functions
x_values <- seq(-5,
5,
by = 0.1)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x_values)
y_f2 <- f2(x_values)
#Creating a dataframe for plots
df <- data.frame(x = x_values,
f1 = y_f1,
f2 = y_f2)
View(df)
View(df)
# Parameters
mu = 0
sigma = 1.0
tau = 1.0
#Defining f1 function
f1 <- function(x) {
(1 / (sigma * sqrt(2 * pi))) * exp(-0.5 * ((x - mu) / sigma) ^ 2)
}
f2 <- function(x) {
(sqrt(tau / (2 * pi))) * (exp(-tau * (x - mu) ^ 2) / 2)
}
#Generate some x-values for the functions
x_values <- seq(-5,
5,
by = 0.1)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x_values)
y_f2 <- f2(x_values)
#Creating a dataframe for plots
df <- data.frame(x = x_values,
f1 = y_f1,
f2 = y_f2)
View(df)
#Generate some x-values for the functions
x_values <- seq(-5,
5,
by = 0.1)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x_values)
y_f2 <- f2(x_values)
#Creating a dataframe for plots
df <- data.frame(x = x_values,
f1 = y_f1,
f2 = y_f2)
View(df)
pacman::p_load(knitr,
ggplot2)
plot1 <- ggplot(df,
aes(x)) +
geom_line(aes(y = f1, colour = "f1")) +
geom_line(aes(y = f2, colour = "f2")) +
labs(title = "probability density functions with mu = 0, sigma = 1, tau = 1",
subtitle = "learning") +
theme_minimal()
plot1
#create a col to check if theyre the same
library(tidyverse)
df <- df %>% mutate(checking_stuff = ifelse(f1 == f2, TRUE, FALSE))
View(df)
(1 / (sigma * sqrt(2 * pi))) * (exp(-0.5 * ((x - mu) / sigma) ^ 2))
#Defining f1 function
f1 <- function(x) {
(1 / (sigma * sqrt(2 * pi))) * (exp(-0.5 * ((x - mu) / sigma) ^ 2))
}
#Generate some x-values for the functions
x_values <- seq(-5,
5,
by = 0.1)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x_values)
y_f2 <- f2(x_values)
#Creating a dataframe for plots
df <- data.frame(x = x_values,
f1 = y_f1,
f2 = y_f2)
plot1 <- ggplot(df,
aes(x)) +
geom_line(aes(y = f1, colour = "f1")) +
geom_line(aes(y = f2, colour = "f2")) +
labs(title = "probability density functions with mu = 0, sigma = 1, tau = 1",
subtitle = "learning") +
theme_minimal()
plot1
#create a col to check if theyre the same
library(tidyverse)
df <- df %>% mutate(checking_stuff = ifelse(f1 == f2, TRUE, FALSE))
View(df)
f2 <- function(x, mu, tau) {
(sqrt(tau / (2 * pi))) * (exp(-tau * (x - mu) ^ 2) / 2)
}
y_f2 <- f2(x = x_values,
mu = 0,
sigma = 3)
#Defining f1 function
f1 <- function(x, mu, tau) {
(1 / (sigma * sqrt(2 * pi))) * exp(-0.5 * ((x - mu) / sigma) ^ 2)
}
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x = x_values,
mu = 0,
sigma = 3)
#Defining f1 function
f1 <- function(x, mu, sigma) {
(1 / (sigma * sqrt(2 * pi))) * exp(-0.5 * ((x - mu) / sigma) ^ 2)
}
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x = x_values,
mu = 0,
sigma = 3)
y_f2 <- f2(x = x_values, tau = 3, mu = 0)
#Generate some x-values for the functions
x_values <- seq(-5,
5,
by = 0.1)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x = x_values,
mu = 0,
sigma = 3)
y_f2 <- f2(x = x_values, tau = 3, mu = 0)
#Creating a dataframe for plots
df <- data.frame(x = x_values,
f1 = y_f1,
f2 = y_f2)
plot1 <- ggplot(df,
aes(x)) +
geom_line(aes(y = f1, colour = "f1")) +
geom_line(aes(y = f2, colour = "f2")) +
labs(title = "probability density functions with mu = 0, sigma = 1, tau = 1",
subtitle = "learning") +
theme_minimal()
plot1
#create a col to check if theyre the same
library(tidyverse)
df <- df %>% mutate(checking_stuff = ifelse(f1 == f2, TRUE, FALSE))
View(df)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x = x_values,
mu = 0,
sigma = 2)
#Generate some x-values for the functions
x_values <- seq(-5,
5,
by = 0.1)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x = x_values,
mu = 0,
sigma = 2)
y_f2 <- f2(x = x_values, tau = 3, mu = 0)
#Creating a dataframe for plots
df <- data.frame(x = x_values,
f1 = y_f1,
f2 = y_f2)
plot1 <- ggplot(df,
aes(x)) +
geom_line(aes(y = f1, colour = "f1")) +
geom_line(aes(y = f2, colour = "f2")) +
labs(title = "probability density functions with mu = 0, sigma = 1, tau = 1",
subtitle = "learning") +
theme_minimal()
plot1
#create a col to check if theyre the same
library(tidyverse)
df <- df %>% mutate(checking_stuff = ifelse(f1 == f2, TRUE, FALSE))
#Generate some x-values for the functions
x_values <- seq(-5,
5,
by = 0.1)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x = x_values,
mu = 0,
sigma = 2)
y_f2 <- f2(x = x_values,
tau = 2,
mu = 0)
#Creating a dataframe for plots
df <- data.frame(x = x_values,
f1 = y_f1,
f2 = y_f2)
plot1 <- ggplot(df,
aes(x)) +
geom_line(aes(y = f1, colour = "f1")) +
geom_line(aes(y = f2, colour = "f2")) +
labs(title = "probability density functions with mu = 0, sigma = 1, tau = 1",
subtitle = "learning") +
theme_minimal()
plot1
#create a col to check if theyre the same
library(tidyverse)
df <- df %>% mutate(checking_stuff = ifelse(f1 == f2, TRUE, FALSE))
y_f2 <- f2(x = x_values,
tau = 7,
mu = 0)
#Generate some x-values for the functions
x_values <- seq(-5,
5,
by = 0.1)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x = x_values,
mu = 0,
sigma = 2)
y_f2 <- f2(x = x_values,
tau = 7,
mu = 0)
#Creating a dataframe for plots
df <- data.frame(x = x_values,
f1 = y_f1,
f2 = y_f2)
plot1 <- ggplot(df,
aes(x)) +
geom_line(aes(y = f1, colour = "f1")) +
geom_line(aes(y = f2, colour = "f2")) +
labs(title = "probability density functions with mu = 0, sigma = 1, tau = 1",
subtitle = "learning") +
theme_minimal()
plot1
#create a col to check if theyre the same
library(tidyverse)
df <- df %>% mutate(checking_stuff = ifelse(f1 == f2, TRUE, FALSE))
#Generate some x-values for the functions
x_values <- seq(-5,
5,
by = 0.1)
#Calculate y values using the functions f1 and f2
y_f1 <- f1(x = x_values,
mu = 0,
sigma = 2)
y_f2 <- f2(x = x_values,
tau = 20,
mu = 0)
#Creating a dataframe for plots
df <- data.frame(x = x_values,
f1 = y_f1,
f2 = y_f2)
plot1 <- ggplot(df,
aes(x)) +
geom_line(aes(y = f1, colour = "f1")) +
geom_line(aes(y = f2, colour = "f2")) +
labs(title = "probability density functions with mu = 0, sigma = 1, tau = 1",
subtitle = "learning") +
theme_minimal()
plot1
#create a col to check if theyre the same
library(tidyverse)
df <- df %>% mutate(checking_stuff = ifelse(f1 == f2, TRUE, FALSE))
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = 'C:\Uni\2_semester\Methods_02\methods02\classes\class2')
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = 'C:/Uni/2_semester/Methods_02/methods02/classes/class2')
library(pacman)
pacman::p_load(tidyverse,
ggpubr,
ggplot2)
pacman::p_load(tidyverse,
ggpubr)
# Here's a simple for-loop
for (i in 1:10){ # For each i in 1:10...
print(i+5)    # Do this..
}
# your simple loop here
# your simple loop here
list <- seq(-5, 5, by = 0.5)
print(number - 3)
list <- seq(-5, 5, by = 0.5)
for (number in list){
print(number - 3)
}
# A simple while-loop
number = 0
while (number < 10){ # While the number is below 10, do the following
print(number)
number = number + 1
}
# your simple while-loop here
some_number = some_number + 3.5
some_number = 0
while (some_number<20){
print("The number is still below 20")
some_number = some_number + 3.5
}
some_number = 0
while (some_number<20){
print("The number is still below 20")
print(some_number)
some_number = some_number + 3.5
}
getwd()
setwd(C:\Uni\2_semester\Methods_02\portfolio-assignment-1)
setwd("C:\Uni\2_semester\Methods_02\portfolio-assignment-1")
setwd("C:/Uni/2_semester/Methods_02/portfolio-assignment-1")
pacman::p_load(tidyverse,
)
library(pacman)
pacman::p_load(tidyverse,
)
library(pacman)
pacman::p_load(tidyverse,
)
library(pacman)
pacman::p_load(tidyverse
)
?nrow()
?sample()
vector <- c(savings = 5, se_savings = 4, market = 40000, se_market = 10000)
tibble <- as_tibble(vector)
View(tibble)
view(vector)
tibble <- data.frame(vector)
View(tibble)
df <- data.frame(vector)
View(df)
?replicate()
?rnorm()
?rbinom()
?dnorm()
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "/Users/pernillebrams/Desktop/AARHUS_UNIVERSITY/instructor_2024/methods-2")
# Make sure this guy is installed/updated
install.packages("rstanarm")
library(rstanarm)
# Load the rest
library(pacman)
pacman::p_load(tidyverse,
ggpubr,
ggplot2,
stringr)
# Load data
hibbs <- read.table("data/ElectionsEconomy/data/hibbs.dat", header = TRUE)
getwd()
setwd("C:/Uni/2_semester/Methods_02/methods02/classes")
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "/Users/pernillebrams/Desktop/AARHUS_UNIVERSITY/instructor_2024/methods-2")
# Make sure this guy is installed/updated
# Load the rest
library(pacman)
pacman::p_load(tidyverse,
ggpubr,
ggplot2,
stringr,
rstanarm)
# Load data
hibbs <- read.table("data/ElectionsEconomy/data/hibbs.dat", header = TRUE)
?read.table()
getwd()
# Load data
hibbs <- read.table("C:/Uni/2_semester/Methods_02/methods02/classes/data/ElectionsEconomy/data/hibbs.dat", header = TRUE)
# Make scatterplot
plot(hibbs$growth, hibbs$vote, xlab="Average recent growth in personal income",
ylab="Incumbent party's vote share")
# Estimate regression y = a + bx + error
M1 <- stan_glm(vote ~ growth, data=hibbs)
# Add a fitted line to the graph
abline(coef(M1), col="gray") # needs to be run with the plot() code above - running the whole chunk is the easiest way
# Display the fitted model
print(M1)
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "/Users/pernillebrams/Desktop/AARHUS_UNIVERSITY/instructor_2024/methods-2")
# Make sure this guy is installed/updated
# Load the rest
library(pacman)
pacman::p_load(tidyverse,
ggpubr,
ggplot2,
stringr,
rstanarm)
# Load data
hibbs <- read.table("C:/Uni/2_semester/Methods_02/methods02/classes/data/ElectionsEconomy/data/hibbs.dat", header = TRUE)
# Make scatterplot
plot(hibbs$growth, hibbs$vote, xlab="Average recent growth in personal income",
ylab="Incumbent party's vote share")
# Estimate regression y = a + bx + error
M1 <- stan_glm(vote ~ growth, data=hibbs)
# Add a fitted line to the graph
abline(coef(M1), col="gray") # needs to be run with the plot() code above - running the whole chunk is the easiest way
# Display the fitted model
print(M1)
# Basic plot with ggplot2
ggplot(hibbs, aes(x = growth, y = vote)) +
geom_point() +  # Add points
labs(
x = "Average recent growth in personal income",
y = "Incumbent party's vote share",
title = "Relationship between Income Growth and Vote Share",
subtitle = "Data from Hibbs Dataset"
) +
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
plot.subtitle = element_text(hjust = 0.5)  # Center the subtitle
) +
geom_smooth(method = "lm", se = FALSE, color = "blue")  # Add a linear regression line
set.seed(1998) # setting a seed (in the best year ever??) - this way, even though it's random, you'll get reproducible results next time you run this with this seed
# rnorm() works like: my_simulated_data <- rnorm(n, mean, sd) - now you go!
# Specifying my stuff
n <- 1000 # Number of points
mean <- 50 # Specified mean
sd <- 10 # Specified standard deviation
data <- rnorm(n, mean, sd) # Generate random data
# Making a plot
ggplot(data.frame(x = data), aes(x)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
geom_density(alpha = .2, fill = "#FF6666") +
labs(title = "Histogram of Simulated Data", x = "Value", y = "Density")
# Get empirical stuff
mean(data) # 50.0574
sd(data)   # 10.29745
# See the range of x
summary(hibbs$growth) # roughly 0 to 4%
# Let's write down what we know. We're given the linear relationship, and we know what the residual standard deviation should be:
intercept = 30
slope = 10
residual_sd = 3.9
# Now, let's generate some x-values in the same range as the real data (0 to 4 roughly), since the question asks for 'same range of x'
x_values <- seq(0, 4, length.out = 1000)  # x ranging from 0 to 4%, getting 100 points
# Now, we can calculate some y values based on the line we're given (we will add the error term shortly)
y_values_line <- intercept + slope * x_values
# Generate hypothetical data with the same residual standard deviation
# We can do this by adding normally distributed random errors with standard deviation of 3.9
set.seed(123)  # for reproducibility
y_values_data <- y_values_line + rnorm(length(x_values), mean = 0, sd = residual_sd)
# Create dataframe for ggplot
data <- data.frame(
x = x_values,            # our x-values between 0 and 4
y_line = y_values_line,  # y-data with line
y_data = y_values_data   # y-data with error
)
# Now, let's plot
p <- ggplot(data, aes(x = x)) +
geom_point(aes(y = y_data), alpha = 0.6, color = 'blue') +  # Plotting the data points
geom_line(aes(y = y_line), color = 'black') +  # Plotting the regression line
labs(
x = 'Average recent growth in personal income (%)',
y = "Incumbent party's vote share",
title = 'Hypothetical data and fitted line',
subtitle = 'Fitted line: y = 30 + 10x'
) +
theme_minimal() +
theme(legend.position = "none") +
geom_smooth(aes(y = y_data), method = "lm", se = FALSE, color = "black")  # Ensure the correct y aesthetic is used
# Display the plot
p
# Fit a model for fun to see
M12a <- stan_glm(y_data ~ x, data = data, refresh = 0)
print(M12a) # We see 3.9 under sigma indeed
