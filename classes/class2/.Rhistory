n_shots[i] <- simulate_shots()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- simulate_shots()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- simulate_shots()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- simulate_shots()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- simulate_shots()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- simulate_shots()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- simulate_shots()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- simulate_shots()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- simulate_shots()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
'''return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
"This guy hit {shots} shots!", " And he used a total of {total_shots} shots."'''
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
"This guy hit {shots} shots!", " And he used a total of {total_shots} shots."
))
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
basketball()
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
return(total_shots)
# return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
#   "This guy hit {shots} shots!", " And he used a total of {total_shots} shots."
# ))
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
basketball()
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
return(total_shots)
# return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
#   "This guy hit {shots} shots!", " And he used a total of {total_shots} shots."
# ))
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
basketball()
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
return(total_shots)
# return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
#   "This guy hit {shots} shots!", " And he used a total of {total_shots} shots."
# ))
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
basketball()
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
return(total_shots)
# return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
#   "This guy hit {shots} shots!", " And he used a total of {total_shots} shots."
# ))
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
basketball()
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
return(total_shots)
# return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
#   "This guy hit {shots} shots!", " And he used a total of {total_shots} shots."
# ))
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
basketball()
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
return(total_shots)
# return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
#   "This guy hit {shots} shots!", " And he used a total of {total_shots} shots."
# ))
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
basketball()
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- basketball()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- basketball()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- basketball()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- basketball()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- basketball()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- basketball()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- basketball()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- basketball()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- basketball()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- basketball()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
"This guy hit {shots} shots!", " And he used a total of {total_shots} shots."
))
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
basketball()
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
"This guy hit {shots} shots!", " And he used a total of {total_shots} shots."
))
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
basketball()
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
"This guy hit {shots} shots!", " And he used a total of {total_shots} shots."
))
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
basketball()
# Function to simulate basketball player
basketball <- function(){
consecutive_shot <- 0
shots <- 0
total_shots <- 0
while (consecutive_shot < 2) {
if (rbinom(1,1, 0.6) >= 1) {
consecutive_shot <- 0
shots <- shots + 1
#print("You hit it")
} else {
consecutive_shot <- consecutive_shot + 1
}
total_shots <- total_shots + 1
}
return(total_shots)
# return(str_glue( #This allows for string interpolation like JavaScript, where the number of shots is input by {shots}
#   "This guy hit {shots} shots!", " And he used a total of {total_shots} shots."
# ))
}
# Example usage of the function, when done
# basket_sim <- basketball(printing = TRUE)
basketball()
view(n_shots)
n_shots %>% ggplot(aes(x=x)) +
geom_point()
n_shots <- as_tibble(n_shots)
n_shots %>% ggplot(aes(x=x)) +
geom_point()
View(n_shots)
n_shots <- as_tibble(n_shots)
n_shots %>% ggplot(aes(x=value)) +
geom_point()
n_shots <- as_tibble(n_shots)
n_shots %>% ggplot(aes(x=value, y = mean(n_shots))) +
geom_point()
n_sims <- 1000
n_shots <- rep(NA, n_sims)
for (i in 1:n_sims) {
n_shots[i] <- basketball()
}
mean(n_shots)
sd(n_shots)
hist(n_shots)
n_shots <- as_tibble(n_shots)
n_shots %>% ggplot(aes(x=value, y = mean)) +
geom_point()
n_shots <- as_tibble(n_shots)
n_shots %>% ggplot(aes(x=value, y = mean())) +
geom_point()
n_shots <- as_tibble(n_shots)
ggplot(data = n_shots, (aes(x=value, y = mean)) +
geom_point()
n_shots <- as_tibble(n_shots)
ggplot(data = n_shots, (aes(x=value, y = mean(n_shots))) +
geom_point()
n_shots <- as_tibble(n_shots)
ggplot(data = n_shots, (aes(x=value, y = mean(n_shots)))) +
geom_point()
n_shots <- as_tibble(n_shots)
n_shots %>% ggplot(aes(x = len(n_shots[0], y = basketball()))) +
geom_point()
n_shots <- as_tibble(n_shots)
n_shots %>% ggplot(aes(x = length(n_shots[0], y = basketball()))) +
geom_point()
View(n_shots)
n_shots <- as_tibble(n_shots)
n_shots %>% ggplot(aes(x = length(n_shots$value, y = basketball()))) +
geom_point()
n_shots <- as_tibble(n_shots)
n_shots %>% ggplot(aes(x = length(n_shots$value), y = basketball()))) +
n_shots <- as_tibble(n_shots)
n_shots %>% ggplot(aes(x = length(n_shots$value), y = basketball())) +
geom_point()
# Function to simulate basketball shots until 2 consecutive misses
simulate_shots <- function() {
consecutive_misses <- 0
total_shots <- 0
successful_shots <- 0
while (consecutive_misses < 2) {
# Simulate a shot
if (runif(1) <= 0.6) {  # Assume 60% chance of making the shot
consecutive_misses <- 0  # Reset consecutive misses if the shot is made
successful_shots <- successful_shots + 1
} else {
consecutive_misses <- consecutive_misses + 1
}
total_shots <- total_shots + 1
}
return(c(total_shots, successful_shots / total_shots))  # Return total shots and proportion of successes
}
# Simulate multiple trials
num_trials <- 1000
shots_data <- t(replicate(num_trials, simulate_shots()))
# Create scatterplot
plot(shots_data[,1], shots_data[,2], xlab = "Number of Shots", ylab = "Proportion of Successes",
main = "Number of Shots vs Proportion of Successes")
# Function to simulate basketball shots until 2 consecutive misses
simulate_shots <- function() {
consecutive_misses <- 0
total_shots <- 0
successful_shots <- 0
while (consecutive_misses < 2) {
# Simulate a shot
if (runif(1) <= 0.6) {  # Assume 60% chance of making the shot
consecutive_misses <- 0  # Reset consecutive misses if the shot is made
successful_shots <- successful_shots + 1
} else {
consecutive_misses <- consecutive_misses + 1
}
total_shots <- total_shots + 1
}
return(c(total_shots, successful_shots / total_shots))  # Return total shots and proportion of successes
}
# Simulate multiple trials
num_trials <- 1000
shots_data <- t(replicate(num_trials, simulate_shots()))
# Create scatterplot
plot(shots_data[,1], shots_data[,2], xlab = "Number of Shots", ylab = "Proportion of Successes",
main = "Number of Shots vs Proportion of Successes")
